name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Build With Optimizations
        run: |
          # Install dependencies for build
          npm install
          
          # Create necessary environment variables
          echo "NEXT_TELEMETRY_DISABLED=1" > .env.local
          echo "NEXT_SWC_MINIFY=true" >> .env.local
          echo "NEXT_JS_IGNORE_ESLINT=1" >> .env.local
          echo "NEXT_JS_IGNORE_TYPECHECK=1" >> .env.local
          
          # Build the application
          npm run build
          
          # Create a simplified server.js file for Azure
          cat > .next/standalone/server.js << 'EOL'
          const { createServer } = require('http');
          const { parse } = require('url');
          const next = require('next');
          
          const dev = false;
          const hostname = '0.0.0.0';
          const port = process.env.PORT || 3000;
          
          const app = next({ dev, dir: __dirname });
          const handle = app.getRequestHandler();
          
          app.prepare().then(() => {
            createServer(async (req, res) => {
              try {
                const parsedUrl = parse(req.url, true);
                await handle(req, res, parsedUrl);
              } catch (err) {
                console.error('Error occurred handling', req.url, err);
                res.statusCode = 500;
                res.end('Internal Server Error');
              }
            }).listen(port, hostname, (err) => {
              if (err) throw err;
              console.log(`Ready on http://${hostname}:${port}`);
            });
          });
          EOL
          
          # Create a basic package.json with scripts
          cat > .next/standalone/package.json << 'EOL'
          {
            "name": "website",
            "version": "0.1.0",
            "private": true,
            "scripts": {
              "start": "node server.js"
            },
            "dependencies": {
              "next": "15.1.5",
              "react": "19.0.0",
              "react-dom": "19.0.0"
            },
            "engines": {
              "node": ">=18.0.0"
            }
          }
          EOL
          
          # Create a web.config file for Azure to properly handle Next.js routing
          cat > .next/standalone/web.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <webSocket enabled="false" />
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^server.js\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <security>
                <requestFiltering removeServerHeader="true" />
              </security>
              <httpProtocol>
                <customHeaders>
                  <remove name="X-Powered-By"/>
                </customHeaders>
              </httpProtocol>
              <httpErrors existingResponse="PassThrough" />
              <iisnode watchedFiles="web.config;*.js"/>
            </system.webServer>
          </configuration>
          EOL
          
          # Ensure static files are correctly copied
          mkdir -p .next/standalone/public
          cp -r public/* .next/standalone/public/ || true
          mkdir -p .next/standalone/.next/static
          cp -r .next/static/* .next/standalone/.next/static/ || true
          
          # Install only minimal required dependencies
          cd .next/standalone
          npm install --production --no-audit --progress=false
          
          # Remove unnecessary files to reduce size
          find node_modules -type d -name ".git" -exec rm -rf {} + 2>/dev/null || true
          find node_modules -type f -name "*.md" -delete || true
          find node_modules -type d -name "test" -exec rm -rf {} + 2>/dev/null || true
          find node_modules -type d -name "tests" -exec rm -rf {} + 2>/dev/null || true
          find node_modules -type d -name "examples" -exec rm -rf {} + 2>/dev/null || true
          find node_modules -type d -name "docs" -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.map" -delete || true
          
          # Back to project root
          cd ../..
          
          # Output size details for verification
          echo "Final Size Information:"
          du -sh .next/standalone
          du -sh .next/standalone/node_modules
      
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_WHITE_GLACIER_0599E9010 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: ".next/standalone"
          api_location: ""
          output_location: ""
          skip_app_build: true
          app_build_command: ""
          is_static_export: false

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_WHITE_GLACIER_0599E9010 }}
          action: "close"
